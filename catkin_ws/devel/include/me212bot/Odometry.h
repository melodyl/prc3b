// Generated by gencpp from file me212bot/Odometry.msg
// DO NOT EDIT!


#ifndef ME212BOT_MESSAGE_ODOMETRY_H
#define ME212BOT_MESSAGE_ODOMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace me212bot
{
template <class ContainerAllocator>
struct Odometry_
{
  typedef Odometry_<ContainerAllocator> Type;

  Odometry_()
    : dthetar(0.0)
    , dthetal(0.0)  {
    }
  Odometry_(const ContainerAllocator& _alloc)
    : dthetar(0.0)
    , dthetal(0.0)  {
  (void)_alloc;
    }



   typedef float _dthetar_type;
  _dthetar_type dthetar;

   typedef float _dthetal_type;
  _dthetal_type dthetal;




  typedef boost::shared_ptr< ::me212bot::Odometry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::me212bot::Odometry_<ContainerAllocator> const> ConstPtr;

}; // struct Odometry_

typedef ::me212bot::Odometry_<std::allocator<void> > Odometry;

typedef boost::shared_ptr< ::me212bot::Odometry > OdometryPtr;
typedef boost::shared_ptr< ::me212bot::Odometry const> OdometryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::me212bot::Odometry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::me212bot::Odometry_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace me212bot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'me212bot': ['/home/robot/me212lab3/catkin_ws/src/me212bot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::me212bot::Odometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::me212bot::Odometry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::me212bot::Odometry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::me212bot::Odometry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::me212bot::Odometry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::me212bot::Odometry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::me212bot::Odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5882b48efc1383bf478a1d9e3f39a0c2";
  }

  static const char* value(const ::me212bot::Odometry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5882b48efc1383bfULL;
  static const uint64_t static_value2 = 0x478a1d9e3f39a0c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::me212bot::Odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "me212bot/Odometry";
  }

  static const char* value(const ::me212bot::Odometry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::me212bot::Odometry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 dthetar\n\
float32 dthetal\n\
\n\
";
  }

  static const char* value(const ::me212bot::Odometry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::me212bot::Odometry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dthetar);
      stream.next(m.dthetal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Odometry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::me212bot::Odometry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::me212bot::Odometry_<ContainerAllocator>& v)
  {
    s << indent << "dthetar: ";
    Printer<float>::stream(s, indent + "  ", v.dthetar);
    s << indent << "dthetal: ";
    Printer<float>::stream(s, indent + "  ", v.dthetal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ME212BOT_MESSAGE_ODOMETRY_H
